// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package promql

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonC5568b25DecodeGithubComPrometheusPrometheusPromql(in *jlexer.Lexer, out *Series) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "metric":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Metric).UnmarshalJSON(data))
			}
		case "values":
			if in.IsNull() {
				in.Skip()
				out.Points = nil
			} else {
				in.Delim('[')
				if out.Points == nil {
					if !in.IsDelim(']') {
						out.Points = make([]Point, 0, 4)
					} else {
						out.Points = []Point{}
					}
				} else {
					out.Points = (out.Points)[:0]
				}
				for !in.IsDelim(']') {
					var v1 Point
					easyjsonC5568b25DecodeGithubComPrometheusPrometheusPromql1(in, &v1)
					out.Points = append(out.Points, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5568b25EncodeGithubComPrometheusPrometheusPromql(out *jwriter.Writer, in Series) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"metric\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Metric).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"values\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Points == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Points {
				if v2 > 0 {
					out.RawByte(',')
				}
				(v3).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Series) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5568b25EncodeGithubComPrometheusPrometheusPromql(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Series) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5568b25EncodeGithubComPrometheusPrometheusPromql(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Series) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5568b25DecodeGithubComPrometheusPrometheusPromql(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Series) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5568b25DecodeGithubComPrometheusPrometheusPromql(l, v)
}
func easyjsonC5568b25DecodeGithubComPrometheusPrometheusPromql1(in *jlexer.Lexer, out *Point) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "T":
			out.T = int64(in.Int64())
		case "V":
			out.V = float64(in.Float64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5568b25EncodeGithubComPrometheusPrometheusPromql1(out *jwriter.Writer, in Point) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"T\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.T))
	}
	{
		const prefix string = ",\"V\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.V))
	}
	out.RawByte('}')
}
func easyjsonC5568b25DecodeGithubComPrometheusPrometheusPromql2(in *jlexer.Lexer, out *Matrix) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(Matrix, 0, 1)
			} else {
				*out = Matrix{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v4 Series
			if data := in.Raw(); in.Ok() {
				in.AddError((v4).UnmarshalJSON(data))
			}
			*out = append(*out, v4)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC5568b25EncodeGithubComPrometheusPrometheusPromql2(out *jwriter.Writer, in Matrix) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v5, v6 := range in {
			if v5 > 0 {
				out.RawByte(',')
			}
			(v6).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v Matrix) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC5568b25EncodeGithubComPrometheusPrometheusPromql2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Matrix) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC5568b25EncodeGithubComPrometheusPrometheusPromql2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Matrix) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC5568b25DecodeGithubComPrometheusPrometheusPromql2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Matrix) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC5568b25DecodeGithubComPrometheusPrometheusPromql2(l, v)
}
